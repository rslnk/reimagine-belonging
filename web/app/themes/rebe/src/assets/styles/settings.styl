/*

  Settings
  ========

  Project specific setings which can be changed to modify the basic look and feel
  of the project with little effort.

  BEM + Namespaces classes naming convention
  ------------------------------------------

  BEM naming convention pattern:

  .block              represents the higher level of an abstraction or component.
  .block__element     represents a descendent of .block that helps form .block as a whole.
  .block--modifier    represents a different state or version of .block.

  Namespaces:

  * o-:         Signify that something is an Object, and that it may be used in any number of
                unrelated contexts to the one you can currently see it in. Making modifications
                to these types of class could potentially have knock-on effects in a lot of other
                unrelated places. Tread carefully.

  * c-:         Signify that something is a Component. This is a concrete, implementation-specific
                piece of UI. All of the changes you make to its styles should be detectable in the context
                you’re currently looking at. Modifying these styles should be safe and have no side effects.

  * u-:         Signify that this class is a Utility class. It has a very specific role (often providing
                only one declaration) and should not be bound onto or changed. It can be reused and
                is not tied to any specific piece of UI.

  * t-:         Signify that a class is responsible for adding a Theme to a view. It lets us know that
                UI Components’ current cosmetic appearance may be due to the presence of a theme.

  * s-:         Signify that a class creates a new styling context or Scope. Similar to a Theme,
                but not necessarily cosmetic, these should be used sparingly—they can be open to abuse and
                lead to poor CSS if not used wisely.

  * is-, has-:  Signify that the piece of UI in question is currently styled a certain way
                because of a state or condition. This stateful namespace is gorgeous, and comes from SMACSS.
                It tells us that the DOM currently has a temporary, optional, or short-lived style applied to it
                due to a certain state being invoked.

  * _:          Signify that this class is the worst of the worst—a hack! Sometimes, although incredibly rarely,
                we need to add a class in our markup in order to force something to work. If we do this, we need to
                let others know that this class is less than ideal, and hopefully temporary (i.e. do not bind
                onto this).

  * js-:        Signify that this piece of the DOM has some behaviour acting upon it, and that JavaScript binds onto it
                to provide that behaviour. If you’re not a developer working with JavaScript, leave these well alone.

  * qa-:        Signify that a QA or Test Engineering team is running an automated UI test which needs to find or
                bind onto these parts of the DOM. Like the JavaScript namespace, this basically just reserves
                hooks in the DOM for non-CSS purposes.


  Read more: http://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces


  ToC
  ---

  1. BREAKPOINTS AND MEDIA QUERIES
  2. COLOURS
  3. TYPEFACES
  4. FONT SIZES
  4. FONT WEIGHTS
  5. BASE STYLES
  6. GRID
  7. DEBUG STYLING
  8. DEFAULT ENVIRONMENT

*/

//
// 1. BREAKPOINTS AND MEDIA QUERIES
// Setup standard widths to pass to media queries
//

$bp--mobile--portrait    = min-width 0px
$bp--mobile--landscape   = min-width 400px
$bp--tablet--portrait    = min-width 550px
$bp--tablet--landscape   = min-width 767px
$bp--desktop--small      = min-width 1024px
$bp--desktop--medium     = min-width 1280px
$bp--desktop--large      = min-width 1600px

// Common aliases
$bp--mobile              = $bp--mobile--portrait
$bp--tablet              = $bp--tablet--portrait
$bp--desktop             = $bp--desktop--small

$screen                  = only screen

//
// 2. COLOURS
//
$color--white            = #ffffff
$color--black            = #000000

$color--light-gray       = #eeeef1
$color--medium-gray      = #9b9ba5
$color--dark-gray        = #757580

$color--carbon-black     = #232326
$color--mint             = #33d1dc
$color--indigo           = #2418b7
$color--blueberry        = #6231d2
$color--lemon            = #ffcc00
$color--yolk             = #ffb400

$color--red              = #e9424e

//
// 3. TYPEFACES
//

$font--main              = 'Open Sans', font-stack( "Helvetica" )
$font--headings          = 'Proxima Nova W01', $font--main

//
// 4. FONT SIZES
//

// Extra small

$size--yocto             = rem(6px)
$size--zepto             = rem(8px)
$size--atto              = rem(10px)
$size--femto             = rem(12px)

// Medium
$size--pico              = rem(14px)
$size--nano              = rem(16px)
$size--micro             = rem(18px)
$size--milli             = rem(20px)
$size--centi             = rem(22px)
$size--deci              = rem(24px)
$size--deca              = rem(26px)
$size--hecto             = rem(28px)

// Extra large
$size--kilo              = rem(30px)
$size--mega              = rem(36px)
$size--giga              = rem(40px)
$size--tera              = rem(45px)
$size--peta              = rem(55px)
$size--exa               = rem(65px)
$size--zetta             = rem(75px)
$size--yotta             = rem(80px)


//
// 5. FONT WEIGHTS
//

$weight--thin            = 100
$weight--light           = 300
$weight--regular         = 400
$weight--medium          = 500
$weight--semibold        = 600
$weight--bold            = 700
$weight--extrabold       = 800
$weight--black           = 900

//
// 6. BASE STYLES
//

$base--font-heading      = $font--headings
$base--font-body         = $font--main
$base--font-color        = $color--carbon-black
$base--font-size         = $size--pico
$base--line-height       = 1.2
$base--spacing           = rem($base--line-height)
$base--margin            = rem(25px)

//
// 7. GRID
//

//gs( "fluid", 12, 5% )
gs( "fluid")

//
// 8. DEBUG STYLING
//

$debug--mode = false

//
// 8. DEFAULT ENVIRONMENT
// Projects may optionally pass through an environment variable to dictate
// whether development specific stylesheets are compiled into the final CSS.
// Set this variable to anything other than 'development' to manually override.
//

$environment ?= 'development'
